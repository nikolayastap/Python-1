    # Урок 10. Лекция. Функции высшего порядка, работа с файлами

def f (x):
  return x * x
print(f(5)) # 25
print(type(f)) # <clas 'function'> У функции есть тип, значит мы можем
# создать переменную типа функции и положить в эту переменную какую-то
# другую функцию.

def f (x):
  return x * x
a = f # — это переменная, которая хранит в себе ссылку на функцию
print(a(5)) # 25
print(f(5)) # 25


# Калькулятор
def calk1(a, b):
  return a + b

def calk2(a, b):
    return a * b

def math(op, x, y):
    print(op(x, y))

math(calk1, 5, 45) # 50
math(calk2, 5, 45) # 225

    # Lambda-функции - механизм, который позволяет превратить подобный вызов во что-то более красивое
def math(op, x, y):
    print(op(x, y))

calk1 = lambda a,b: a + b # Лямда вункция
math(calk1, 5, 45)

# Сокрощаем до
def math(op, x, y):
    print(op(x, y))

math(lambda a,b: a + b, 5, 45) # Можно пропустить создание перемнной описав lambda

        # Задача
# В списке хранятся числа. Нужно выбрать только чётные числа и составить
# список пар (число; квадрат числа).
# 1 2 3 5 8 15 23 38 ->>  [(2, 4), (8, 64), (38, 1444)]
data = [1, 2, 3, 5, 8, 15, 23, 38]
res = []
for i in data :
    if i % 2 == 0:
        res.append((i, i ** 2)) # Передаем это в виде кортежа
print(res)

# Решение с помощю lambda
def select(f, col): # В функцию передаем саму функцию и значение
    return [f(x) for x in col] # Возрощает список в котором к каждому эл применяем функцию f от x

def where(f, col):
    return [x for x in col if f(x)] # Возрощает список x только в том условии если выполнилось условие f от x

data = [1, 2, 3, 5, 8, 15, 23, 38]
res = select(int, data) # Переводим к целчисл значению список data
print(res)
# while позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно.
res = where(lambda x: x % 2 == 0, res)
print(res) # [2, 8, 38]
res = list(select(lambda x: (x, x ** 2), res)) # [(2, 4), (8, 64), (38, 1444)]
print(res)

        # Функция map
# Функция map() применяет указанную функцию к каждому элементу
# итерируемого объекта и возвращает итератор с новыми объектами.

list_1 = [x for x in range(1, 20)] # С пом генератора списков в lict_1 будем хранить эл
print(list_1) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

list_1 = list(map(lambda x: x + 10, list_1)) # В map перед в параметрах функц которую хотим применить к кажд обьекту и сам обьект(list_1)
print(list_1) # [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

        # Задача
# С клавиатуры вводится набор чисел, в качестве разделителя используется
# пробел. Этот набор чисел будет считан в качестве строки.
# Как преобразовать list строк в list чисел?

data = '15 156 96 3 5 8 52 5'
print(data) # 15 156 96 3 5 8 52 5

data = data.split() # split преобразует строку в список
print(data) # ['15', '156', '96', '3', '5', '8', '52', '5']

# Преобразуем список строк, в список цифр
data = '15 156 96 3 5 8 52 5'
data = list(map(int, data.split())) # В списке вызываем функц map в котоой применяем фунц int к обекту data.split
print(data) # [15, 156, 96, 3, 5, 8, 52, 5]



        # Функция filter
# -применяет указанную функцию к каждому эл
# итерируемого объекта и возвращает итератор с теми объектами, для
# которых функция вернула True.

data = [15, 65, 9, 36, 175] # Вернем числа котор оканчиваются на 5
res = list(filter(lambda x: x % 10 == 5, data))
print(res)



# Сокращаем код с помощю изученных функций
data = [1, 2, 3, 5, 8, 15, 23, 38]
res = map(int, data) # Переводим к целчисл значению список data
res = filter(lambda x: x % 2 == 0, res)
res = list(map(lambda x: (x, x ** 2), res))
print(res) # [(2, 4), (8, 64), (38, 1444)]



        # Функция zip
# - применяется к набору итерируемых объектов и возвращает итератор
# с кортежами из элементов входных данных

users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
salary = [111, 222, 333]
data = list(zip(users, ids, salary))
print(data) # [('user1', 4, 111), ('user2', 5, 222), ('user3', 333)]



        # Функция enumerate - позволяет пронумеровать набор данных.
# - применяется к итерируемому объекту и возвращает новый итератор с
# кортежами из индекса и элементов входных данных.

users = ['user1', 'user2', 'user3']
data = list(enumerate(users))
print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]


        # Файлы
# Файлы в текстовом формате используются для:
# ● Хранения данных
# ● Передачи данных в клиент-серверных проектах
# ● Хранения конфигов
# ● Логирования действий

# Что нужно для работы с файлами:
# 1. Завести переменную, которая будет связана с этим текстовым файлом.
# 2. Указать путь к файлу.
# 3. Указать, в каком режиме мы будем работать с файлом.

# Варианты режима (мод):
# 1. a – открытие для добавления данных.
#       ○ Позволяет дописывать что-то в имеющийся файл.
#       ○ Если вы попробуете дописать что-то в несуществующий файл, то
#         файл будет создан и в него начнётся запись.
colors = ['red', 'green', 'blue']
data = open('file.txt', 'a') # указываем режим, в котором будем работать (создаст файл в папке)
data.writelines(colors) # Записываем данные из списка
data.close() # Открываемый фал обязательно закрываем

# 2. r – открытие для чтения данных.
#       ○ Позволяет читать данные из файла.
#       ○ Если вы попробуете считать данные из файла, которого не
#         существует, программа выдаст ошибку.
path = 'file.txt'
data = open('file.txt', 'r') # Открываем в вежиме чтения
for line in data: # Проходим по всему файлу
    print(line) # И печатаем 
data.close()

# 3. w – открытие для записи данных.
#       ○ Позволяет записывать данные и создавать файл, если его не
#         существует.
with open('file.txt', 'w') as data:
    data.write('line 1\n')
    data.write('line 2\n')
print(56) # Файл автоматически закроется

# Миксованные режимы:
# 4. w+
#    ○ Позволяет открывать файл для записи и читать из него.
#    ○ Если файла не существует, он будет создан.
# 5. r+
#    ○ Позволяет открывать файл для чтения и дописывать в него.
#    ○ Если файла не существует, программа выдаст ошибку.

colors = ['red', 'green', 'blue']
data = open('file.txt', 'a') # указываем режим, в котором будем работать (создаст файл в папке)
data.writelines(colors) # Записываем данные из списка
data.close() # Открываемый фал обязательно закрываем


    # Библиотеки для работф с операционной системой (малая часть)

        # Модуль os - множество функций для работы с операционной
# системой, причем их поведение, как правило, не зависит от ОС, поэтому
# программы остаются переносимыми.

# import os - чтобы начать работать с данным модулем необходимо его
# импортировать в свою программу

import os
os.chdir('C:/Users/79190/PycharmProjects/GB') # смена текущей директории.

import os
print(os.getcwd()) # 'C:\Users\79190\PycharmProjects\webproject' - - текущая рабочая директория


# ● os.path - является вложенным модулем в модуль os и реализует
# некоторые полезные функции для работы с путями, такие как:
import os
print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) # 'main.py - базовое имя пути

import os
print(os.path.abspath('main.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py' - возвращает нормализованный абсолютный путь.




        # Модуль shutil
# - содержит набор функций высокого уровня для обработки файлов, групп
# файлов, и папок. В частности, доступные здесь функции позволяют копировать,
# перемещать и удалять файлы и папки. Часто использ вместе с модулем os.

# import shutil - чтобы начать работать с данным модулем необходимо его
# импортировать в свою программу

# ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные)
#   файла src в файл dst.
# ● shutil.copy(src, dst) - копирует содержимое файла src в файл или 
#   папку dst.
# !!!! Может обнулить комп ● shutil.rmtree(path) - Удаляет текущую
# директорию и все поддиректории; path должен указывать на директорию,
# а не на символическую ссылку.
