#         # Коллекции данных

#   # Списки - это упорядоч конечный набор эл. (это тот же массив, в котором можно
# # хранить эл. любых типов даных)

# list_1 = [] # Создание пустого списка
# list_2 = list() # Функция list() так же создает пустой списк
# list_1 = [7, 9, 11, 13, 15, 17]

# print(list_1[0]) # Вывод эл. спика под индексом 0 (7)

# for i in list_1:
#   print(i) # Выво спискас помощю цикла

# print(len(list_1)) # Выводит размер списка


# #     Добавляем значение в список
# list_1 = [1, 5]
# print(list_1)
# list_1.append(8) # Позволяет добавить эл. в конец списка
# print(list_1)


# #     Прог. наполняет список по очередно
# list_1 = []
# print(list_1)
# for i in range(5):
#   list_1.append(i)
#   print(list_1)


# #     Удаляет последний эл. списка
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop()) # 0 #.pop удаляет посл. эл.
# print(list_1.pop()) # [12, 7, -1, 21]

# list_1 = [12, 7, -1, 21, 0]
# a = list_1.pop() #.pop удаляет посл. эл. и возращает значение
# print(a) # 0

# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop(0)) # 0 #.pop удаляет эл. по индексу
# print(list_1) # [7, -1, 21, 0]

# #     Добавляет эл. на какую то позицию
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.insert(2, 11)) # 1й аргумент позиция на какую нуж вст эл., 2й - значение
# print(list_1) # [12, 7, 11, -1, 21, 0]
 

#     # В списках можно работать со срезами
#       #   0  1  2  3  4  5  6  7  8   9
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#       # -10 -9 -8 -7 -6 -5 -4 -3  -2  -1
# print(list_1[0])                # 1
# print(list_1[len(list_1)-1])    # 10
# print(list_1[-5])               # 6
# print(list_1[:])                # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[:2])               # [1, 2]
# print(list_1[len(list_1)-2:])   # [9, 10]
# print(list_1[2:9])              # [3, 4, 5, 6, 7, 8, 9]
# print(list_1[6:-18])            # []
# print(list_1[0:len(list_1):6])  # [1, 7]
# print(list_1[::6])              # [1, 7]


#   # Кортежи
# # Кортеж - это неизменяемый список. Используются в случае защиты каких-либо данныйх
# # от изиенений. Кортеж занимает меньше места в памяти и работает быстрее, по
# # сравнению со списками
# # В кортежах пишем пароли, назание хоста где пишем приложение

# t = () # Создание пустого картежа
# print(type(t)) # class <'tuple'>

# t = (1)
# print(type(t)) # class <'int'> Интопритатор понял что это целое число

# t = (1,) # чтобы создать картеж обязательно необходимо ставить запятую (,)
# print(type(t)) # class <'tuple'>

# v = [1, 8, 9]
# print(v) # Смотрим на результат [1, 8, 9]
# print(type(v)) # class <'list'>
# v = tuple(v) # Список приобразовываем в картеж
# print(v) # (1, 8, 9)
# print(type(v)) # class <'tuple'>

# # Картеж разединяем на 3 переменные
# v = [1, 8, 9]
# v = tuple(v)
# a, b, c = v # Сделали распаковку картежа
# print(a, b, c) # 1 8 9


#   # Сходства со списками

# t = (1, 2, 3, 5,)
# print(t[1]) # Выводим по индексам # 2

# for i in t: # С помщю цикла по всем эл.
#   print(i) 

# for i in range(len(t)): # для работы со списками
#   print(t[i])


#     # Словари (dictionary) - не упорядочные коллекции произыольных обьектов с доступом по ключу
# # В словаре для определения эл. исп. значение ключа (строка, число)

# d = {} # Создание пустого словаря
# d = dict() # Так же является словарем

# d['q'] = 'qwerty' # Что бы добавлять какие то значения. d['q'] ключь по которому получаем q
# print(d) # {'q': 'qwerty'} в словаре есть ключ q по которому получаем qwerty

# d['w'] = 'werty' 
# print(d['q']) # qwerty

# dictionary = {} # пустой словарь
# dictionary ={'up': '↑', 'left': '←', 'down': '↓', 'right': '→'} # Указали значения
# print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
# print(dictionary['left']) # ←  Вызов знач. по ключу

# # типы ключей могут отличаться
# print(dictionary['up']) # ↑
# # типы ключей могут отличаться
# dictionary['left'] = '⇐'
# print(dictionary['left']) # ⇐
# print(dictionary['type']) # KeyError: 'type' ошибка так как такого ключа не сущест.
# del dictionary['left'] # удаление элемента
# for item in dictionary:
#   print(item) # Вывод названия ключей в столбик
# # up
# # down
# # right
#   print('{}: {}'.format(item, dictionary[item])) # Вывод названия ключей и значение в столбик
# # up: ↑
# # down: ↓
# # right: →
# for (k,v) in dictionary.items(): # Друг вариант # dictionary.items()
#   print(k, v) # k ключ v значение
# # up: ↑
# # down: ↓
# # right: →

# dictionary[895] = 987654 # Так же можем добавить новое значение по ключу
# print(dictionary) # {'up': '↑', 'left': '←', 'down': '↓', 'right': '→', 985: 987654}

#     # Множества
# # Множества содержат в себе уникальные эл(не повторяются), не обязательно упорядоченные.
# # Множество может содержать значения любых типов. Если есть два множества, можно
# # совершать над ними любые стандартные операции (объединение, пересечение и разность)

# colors = {'red', 'green', 'blue'}
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red') # Команда для добавления знч., но в дан.случ. не добавится так как red уже есть
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray') # В дан.случ добавится в случ. место
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red') # Для удаления значения
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red'
# colors.discard('red') # ok # Проверяет, есть ли знач в дан мнодестве, если нету пропускает строку
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # { } # Для очистки всех знач из множества
# print(colors) # set()

# q = set() # создает пустое множество

# # Операции со множествами
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # c = {1, 2, 3, 5, 8} В переменную с копируем множ из переменной а
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21} Обьединение
# i = a.intersection(b) # i = {8, 2, 5} Находит пересечения, эл которые есть в обоих множествах
# dl = a.difference(b) # dl = {1, 3} Находит разность в a
# dr = b.difference(a) # dr = {13, 21} Находит разность в b
# q=a.union(b).difference(a.intersection(b)) # {1, 21, 3, 13} a.intersection(b) - Находит пересечения, a.union(b) - Обьединяем, difference - Находим разность

# # Неизменяемое или замороженное множество(frozenset) — множество, с которым
# # не будут работать методы удаления и добавления.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b) # frozenset({1, 2, 3, 5, 8})

#     # List Comprehension
# # — упрощеное создание списка, который задействует цикл for, а также инструкции
# # if-else для определения того, что в итоге окажется в финальном списке

# # 1. Простая ситуация — список:
#         # non              5       -> 5раз добавим значение non
# list_1 = [exp for item in iterable] # exp(значение)идя for 1 item по iterable(колекции данных)

# # 2. Выборка по заданному условию:
# list_1 = [exp for item in iterable (if conditional)] #
# # Примеры:
# # 1. Создать список чисел от 1 до 100
# list_1 = []
# for i in range(1, 101):
# list_1.append(i)
# print(list_1) # [1, 2, 3,..., 100]
# # С использованием списка
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]

# # 2. Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100]

# # Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),...,(100, 100)]

# # Можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]








